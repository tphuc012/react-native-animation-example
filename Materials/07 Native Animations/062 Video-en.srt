1
00:00:00,730 --> 00:00:06,490
Generally animated runs on the javascript's side Halvard that means that if there is a lot of javascript

2
00:00:06,490 --> 00:00:09,980
processing happening that your animations may not run at 60.

3
00:00:10,050 --> 00:00:11,840
Yes.

4
00:00:11,880 --> 00:00:17,910
However recently they've added the ability to run some animations on the native side including transforms

5
00:00:18,000 --> 00:00:23,400
and opacity over things like background color and anything that runs through layouts so absolute positioning

6
00:00:23,430 --> 00:00:27,480
or width and height will not be able to run using the native driver.

7
00:00:27,480 --> 00:00:31,600
So let's do a comparison of using the native driver versus not used in native driver.

8
00:00:31,860 --> 00:00:37,220
So here we have an animation and we're not using the native driver we have it commented out.

9
00:00:37,440 --> 00:00:43,230
So impress on it will translate to 300 and we'll jump back to zero with the set value and then we can

10
00:00:43,320 --> 00:00:45,260
enable our use native driver.

11
00:00:45,570 --> 00:00:48,690
Save that and refresh chigger animation again.

12
00:00:49,840 --> 00:00:55,390
And it's basically the exact same animation without really anything different.

13
00:00:55,390 --> 00:01:04,220
However if we remove our unit of driver and we pay some code in time out we'll basically trigger 500

14
00:01:04,220 --> 00:01:07,330
milliseconds into our animation and we'll just do a loop.

15
00:01:07,340 --> 00:01:09,910
So we will block our javascript's thread.

16
00:01:10,310 --> 00:01:15,830
So with our animated running on the javascript side this will block it from being able to do any of

17
00:01:15,830 --> 00:01:16,940
the animations.

18
00:01:16,940 --> 00:01:23,600
So if refreshed this and run it we see that we get stuck and then we'll jump back at some point once

19
00:01:23,600 --> 00:01:25,210
this is actually completed.

20
00:01:28,690 --> 00:01:35,820
However if we flip on our used native driver refresh we can see that this loop is still here and still

21
00:01:35,820 --> 00:01:36,150
run.

22
00:01:36,150 --> 00:01:41,820
However animation will actually continue to run throughout the entire loop because it is running on

23
00:01:41,820 --> 00:01:46,140
the native side.

24
00:01:46,140 --> 00:01:47,890
This also works with spring.

25
00:01:48,000 --> 00:01:53,940
If we remove our duration and pass in spring here refresh and trigger animation we can see that our

26
00:01:53,940 --> 00:01:59,810
spring animation ran on the native side because we still have our while blocking blue.

27
00:01:59,830 --> 00:02:04,510
There's one other option that use native driver works on and that is animated event when it is passed

28
00:02:04,540 --> 00:02:06,010
into a scroll view.

29
00:02:06,040 --> 00:02:14,140
So let's switch over to our command line and do a get reset button as hard and then check out scroll

30
00:02:14,200 --> 00:02:14,740
native

31
00:02:19,130 --> 00:02:24,040
particularly could or could we can see that we don't have any animation that we are triggering but we

32
00:02:24,040 --> 00:02:31,760
are passing an animated event into our onze girl that takes the Y content OFSAA and passes it into this

33
00:02:31,760 --> 00:02:32,850
outstay animation.

34
00:02:34,330 --> 00:02:40,450
Typically you would not define a second parameter to this animated event but you can see that we have

35
00:02:40,540 --> 00:02:45,160
used need of driver being passed in as the second argument and the other thing to note is that we would

36
00:02:45,160 --> 00:02:51,280
typically say Scuola throttles 16 and that's if it's running on the javascript sides of that we're notified

37
00:02:51,310 --> 00:02:54,390
every six Tomales seconds that a scroll event has happened.

38
00:02:54,550 --> 00:03:01,090
However in the case of animated event with a used native driver we want to specify one so we can capture

39
00:03:01,090 --> 00:03:03,140
as many events as we possibly can.

40
00:03:04,460 --> 00:03:10,370
So here we have our interpellation from 1 to 0 so we can pass it into our opacity.

41
00:03:10,400 --> 00:03:16,700
We just set our back on color to meet a red color refreshes and we scroll we can see that our opacity

42
00:03:17,510 --> 00:03:20,440
is changing and it's running on the native side.

