1
00:00:00,580 --> 00:00:05,870
Start with are staggered trackable heads we're going to import an image we're going to import Christophers

2
00:00:05,880 --> 00:00:12,830
you know who is the actual creator of animated but then in to set up some heads on our state.

3
00:00:12,920 --> 00:00:18,170
And so we're just going to set up an image an animated by XYZ so we can control the exact positions

4
00:00:18,230 --> 00:00:19,820
of each of the heads.

5
00:00:19,940 --> 00:00:24,500
And then some text for each image will just out some text and the top one that says drag me.

6
00:00:24,860 --> 00:00:31,270
And then finally our our style sheet will just have a container with aligning our items in the middle.

7
00:00:31,400 --> 00:00:37,730
The heads will be 1880 and a border ages of 40 so that we have a round head and then also we're just

8
00:00:37,730 --> 00:00:39,080
going to add a position absolute.

9
00:00:39,080 --> 00:00:45,170
So these heads are free floating and to center any text in the middle of our images just for the first

10
00:00:45,170 --> 00:00:45,740
one.

11
00:00:45,770 --> 00:00:50,510
But what this is going to do is it's going to create our images free floating so they'll stack on top

12
00:00:50,510 --> 00:00:51,110
of each other.

13
00:00:51,250 --> 00:00:58,310
But because we don't define a left top or bottom or right then these aligned items and justify content

14
00:00:58,310 --> 00:01:02,070
will actually center our drag of bullheads in the middle of the screen.

15
00:01:03,410 --> 00:01:09,480
So the first thing that we noticed in our break down video is that we have to do some sort of drag.

16
00:01:09,650 --> 00:01:14,420
So that means that we're going to set up a pan responder and it's only going to be a single panel responder

17
00:01:14,420 --> 00:01:17,310
for our first top trackable head.

18
00:01:17,450 --> 00:01:22,640
So say this dot pan responder is equal to a pan responder.

19
00:01:23,000 --> 00:01:29,500
And this is just the default you know this element is drag ball and it's always draggle.

20
00:01:29,720 --> 00:01:34,910
We noticed that in our pin responded grant we're going to need to do some extract offsets.

21
00:01:34,910 --> 00:01:39,920
We're going to do some movement here but we didn't see any release animation so we can go ahead and

22
00:01:39,920 --> 00:01:42,900
remove our pen responder release.

23
00:01:43,070 --> 00:01:50,060
So as is typical with a drag animation we're going to need to call extract offset which will take our

24
00:01:50,060 --> 00:01:56,290
Delta values from our gesture state and move them into an offset before our Delta values start overwriting

25
00:01:56,300 --> 00:01:57,590
the estimated value.

26
00:01:57,590 --> 00:02:02,810
And that way we can save off the position that the animation is currently at or the diagonal heads currently

27
00:02:02,810 --> 00:02:07,480
not in our offset however because we have four offsets.

28
00:02:07,480 --> 00:02:13,040
We're going to need to map over all of them and extract the offset of each one so in our on PARASCANDOLA

29
00:02:13,090 --> 00:02:18,800
grant we're going to say this state heads map and we could use a for each year because we're not returning

30
00:02:18,800 --> 00:02:19,490
anything.

31
00:02:19,490 --> 00:02:23,710
But you know map is shorter to type.

32
00:02:23,780 --> 00:02:25,030
We're going to pass an animation.

33
00:02:25,030 --> 00:02:29,660
We're going to we're going to extract animation and this will be our function that we're passing to

34
00:02:29,660 --> 00:02:35,240
our map we're going to grab our animation for each one or animated ex-spy and there were just an animation

35
00:02:35,510 --> 00:02:37,540
extract offset.

36
00:02:38,160 --> 00:02:45,260
So this loop over each one extract the offset and there is currently a bug in animated when we call

37
00:02:45,260 --> 00:02:54,110
extract offset the value is manipulated synchronously and it does not go through value which then would

38
00:02:54,320 --> 00:02:57,500
typically stop any other animation that's happening.

39
00:02:57,560 --> 00:03:03,460
And with that if the animation spring that we're going to use doesn't come to rest for our heads.

40
00:03:03,770 --> 00:03:10,070
And then you kick off a nother animation by pressing on the heads then the animation gets screwed up

41
00:03:10,070 --> 00:03:15,520
and the heads will fly everywhere and then animate spring back to where it's supposed to be.

42
00:03:15,530 --> 00:03:22,100
So to combat this we're just going to do a set value and set the value to x and y of 0.

43
00:03:22,120 --> 00:03:30,260
With animation at set value passenger object X of zero and y of 0 even though extract offset would reset

44
00:03:30,290 --> 00:03:32,990
both x and y to 0 already.

45
00:03:34,170 --> 00:03:41,850
So now for our drag that's actually happening the animated event simply just calls value for both x

46
00:03:41,850 --> 00:03:42,500
and y.

47
00:03:42,630 --> 00:03:45,450
And so that's all we want to do for our first head.

48
00:03:45,450 --> 00:03:53,920
So this state that heads will grab our first one and we'll do get the animation and call set value simply

49
00:03:54,030 --> 00:04:02,430
X and pass an our dx and Y and passing r d y and rather than doing just a gesture state or really care

50
00:04:02,430 --> 00:04:04,400
about is the delta x and Delta y.

51
00:04:04,400 --> 00:04:06,380
So we'll just d structure that right there.

52
00:04:07,690 --> 00:04:13,690
So before we get into doing any of the spring animations or the stagger of the heads what we're going

53
00:04:13,690 --> 00:04:16,860
to do is first we're going to render our heads.

54
00:04:17,050 --> 00:04:24,040
So we're going to do this state heads and we're going to clone it a shallow clone with a slice of zero

55
00:04:24,610 --> 00:04:28,200
and then call a reverse on it before we do our map.

56
00:04:28,210 --> 00:04:34,570
And the reason we're doing this is that the order that you render items in Riak need of matters.

57
00:04:34,570 --> 00:04:40,340
So if we were to render it like this with this one on top what's going to happen is it's going to sit.

58
00:04:40,540 --> 00:04:44,400
It's going to render first and then the other three heads are going to stack on top of it.

59
00:04:44,410 --> 00:04:49,300
So the fourth head will actually prevent us from being able to drag this.

60
00:04:49,300 --> 00:04:51,130
Now you could use the index.

61
00:04:51,130 --> 00:04:57,910
However I'm just going to use the slice reverse here just so that it renders in the correct order in

62
00:04:57,910 --> 00:04:58,840
general.

63
00:04:58,840 --> 00:05:04,470
And now we'll just map over each of our items or each of our heads and we'll get a item.

64
00:05:04,690 --> 00:05:10,170
The index as well as all of the items.

65
00:05:10,320 --> 00:05:18,390
So here is when we're going to determine whether or not we need to add our pan responders to our panhandlers

66
00:05:18,390 --> 00:05:20,100
to the particular image.

67
00:05:20,130 --> 00:05:23,980
So I'll say Konst pan is equal to the index that we're currently at.

68
00:05:24,320 --> 00:05:31,480
And because the image you want to drag is at the end we'll do item's length minus one.

69
00:05:31,650 --> 00:05:36,730
And those items come from this third argument to our callback.

70
00:05:37,050 --> 00:05:42,330
And if it is the last item then we'll just return this stop pan responder pan handlers.

71
00:05:42,360 --> 00:05:49,240
Otherwise we'll just return an empty object so we can just continue our spread on to all of the images.

72
00:05:49,390 --> 00:05:55,720
So now that we have that set up we can do a return and we'll do an animated image because we need to

73
00:05:57,170 --> 00:05:59,950
move things around and use animated values.

74
00:06:00,270 --> 00:06:08,450
We will spread our pan on well specified key index just to remove the error message down below.

75
00:06:08,510 --> 00:06:11,380
However you'd likely want to use an ID for this.

76
00:06:11,400 --> 00:06:19,270
Well then Pastner source which will be item image and then will craft a style Heeres with the style.

77
00:06:19,550 --> 00:06:25,430
And we need to apply our styles dot head which will round our image and then we'll need to craft a dynamic

78
00:06:25,430 --> 00:06:34,240
one and to transform and then with our item that animation will get translate transform to craft that

79
00:06:34,540 --> 00:06:36,340
translate x y for us.

80
00:06:37,940 --> 00:06:43,490
So now that we have all of it all of our images rendering we have the one that we want on top to be

81
00:06:43,490 --> 00:06:44,750
dragged.

82
00:06:44,750 --> 00:06:49,760
We have our extract offset and set value working here.

83
00:06:49,980 --> 00:06:55,590
So now when you refresh we can see that our images are in the middle and then we can also drag this

84
00:06:55,590 --> 00:06:56,810
top one around.

85
00:06:56,850 --> 00:06:59,480
So we've set up the drag for the first item.

86
00:06:59,680 --> 00:07:06,350
However now we need to control our other items to stagger to wherever we're dragging this.

87
00:07:06,570 --> 00:07:09,510
We could add our text that we've defined here.

88
00:07:09,520 --> 00:07:17,920
I'm not going to add them as the child of this of this of the animations in this video but you can put

89
00:07:17,920 --> 00:07:20,410
whatever you want inside of those images.

90
00:07:20,410 --> 00:07:29,000
Now we're going to control our pan respond or move likely you would say let's use animated staggerer

91
00:07:29,120 --> 00:07:32,240
and we'll use an immediate Sagger and see what happens really quick.

92
00:07:32,270 --> 00:07:40,150
So if we were to use animated not stagger what we want to do is get our animations all set up so we'll

93
00:07:40,160 --> 00:07:48,590
say this concert animations Zuccarello this state heads slice and we will ignore the first head because

94
00:07:48,590 --> 00:07:58,810
that's the head that we're dragging and we'll map over and get our animation and we need to switch it

95
00:07:58,820 --> 00:08:03,080
over so we restart that animation.

96
00:08:05,070 --> 00:08:16,680
Arrow function and then we would just turn animated spring and pasan our animation as well as our two

97
00:08:16,710 --> 00:08:22,320
value which you can specify as x Delta X and then r y Delta.

98
00:08:22,320 --> 00:08:22,680
Why.

99
00:08:22,680 --> 00:08:25,700
Because we are doing an animated value x y.

100
00:08:25,830 --> 00:08:31,630
So this is going to craft up an array of spring animations for us to stagger.

101
00:08:31,820 --> 00:08:38,400
Now this would then be passed into animated stagger and let's say you want to stagger 10 milliseconds

102
00:08:38,400 --> 00:08:38,960
in between.

103
00:08:39,150 --> 00:08:43,380
In between each one pass in our animations and then call start.

104
00:08:43,380 --> 00:08:45,680
Now this sounds like it's going to work.

105
00:08:45,690 --> 00:08:48,430
However when we refresh and try dragging.

106
00:08:48,570 --> 00:08:52,060
You can see that only one head is following.

107
00:08:52,380 --> 00:08:54,660
And then they all spring to.

108
00:08:54,710 --> 00:09:04,400
Now the reason that is is that every time we move this this animated Sagger is getting cold again.

109
00:09:04,480 --> 00:09:07,470
Now unlike parallel you can say stop.

110
00:09:07,860 --> 00:09:10,670
What you can say stop together on this one won't stop together.

111
00:09:10,670 --> 00:09:17,210
So basically it's getting 10 milliseconds in and it's triggering the first animated spring we have here.

112
00:09:17,250 --> 00:09:23,930
But then when it's called again it stops all subsequent animations for this second and third head.

113
00:09:24,030 --> 00:09:30,570
And so we basically need to craft our own stagger because this combining all of the animations in a

114
00:09:30,570 --> 00:09:35,910
single Stiger will only work on the first half because the other second and third heads will these and

115
00:09:35,910 --> 00:09:41,310
those animations will be stopped because the pen respond and move gets called on every drag and then

116
00:09:41,310 --> 00:09:44,550
when released there's no more drags the animations complete.

117
00:09:45,730 --> 00:09:51,990
So in order to recreate our animated stagger let's remove our enemies dagger here.

118
00:09:52,420 --> 00:10:01,180
We'll also get the index of our animation to create of our heads and we'll do a sequence with a delay.

119
00:10:01,300 --> 00:10:07,080
So we're going to chunk up each of the animations into their own animated staggered.

120
00:10:07,120 --> 00:10:12,640
So we'll say sequence We'll keep our spring here actually and move this return.

121
00:10:12,640 --> 00:10:14,080
So it's a little bit easier to deal with.

122
00:10:14,080 --> 00:10:17,330
Give us some space and we'll do an animated sequence.

123
00:10:19,200 --> 00:10:25,690
And that takes an array of animation so we'll move this one in here and do some formatting.

124
00:10:25,910 --> 00:10:32,990
And because we want to delay each of the animations by a set amount which is 10 milliseconds we are

125
00:10:32,990 --> 00:10:42,580
saying well use an animated delay and do index times 10 and a comma here and then we'll just call start

126
00:10:42,580 --> 00:10:43,180
on it.

127
00:10:44,910 --> 00:10:51,090
And so this will effectively do the same thing as a stagger will delay a certain amount of time based

128
00:10:51,090 --> 00:10:54,900
upon the head that we're at before we do our spring animation.

129
00:10:55,350 --> 00:11:00,660
And this will then have each of the heads operating on a separate animation.

130
00:11:00,660 --> 00:11:05,770
So once this is called Again each of those will stop and spring to a new location.

131
00:11:05,790 --> 00:11:12,330
However each head will be operating separately so we will get a staggerer to actually happen.

132
00:11:13,900 --> 00:11:19,320
So sometimes with animated you once again line all your animations with a stagger or something.

133
00:11:19,450 --> 00:11:26,950
But sometimes it makes sense and it's required to kind of recreate some of those combined animations

134
00:11:27,100 --> 00:11:29,990
so that the effect will happen as you anticipate.

